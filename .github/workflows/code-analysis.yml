name: Run .NET SonarQube analysis
on:
  push:
    branches:
      - main
      - master
  pull_request:
    paths-ignore:
      - '**.md'
    branches:
      - main
      - master
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  analysis:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    env:
      DOTNET_NOLOGO: 1
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      NUGET_PACKAGES: ${{ github.workspace }}/.github/nuget-packages
      PROJECT_KEY: ${{ github.event.repository.name }}
      ORGANIZATION: ${{ github.repository_owner }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '11'
  
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: | 
            7.x
          source-url: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Get version
        id: changelog
        uses: TriPSs/conventional-changelog-action@latest
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          output-file: 'false'
          git-push: 'false'
          skip-on-empty: 'false'
          skip-version-file: 'true'
          skip-commit: 'true'
          skip-git-pull: 'true'
          skip-tag: 'true'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          mkdir -p ./.sonar/scanner
          chmod a+rwx ./.sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

      - name: Restore dependencies
        run: dotnet restore
    
      - name: Prepare Sonar Scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        run: |
          ./.sonar/scanner/dotnet-sonarscanner begin \
          /k:"${{ env.PROJECT_KEY }}" \
          /o:"${{ env.ORGANIZATION }}" \
          /v:"${{ steps.changelog.outputs.version }}" \
          /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
          /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" \
          /d:sonar.cs.vstest.reportsPaths="TestResults/*.trx" \
          /d:sonar.cs.xunit.reportsPaths="TestResults/*.trx" \
          /d:sonar.cs.opencover.reportsPaths="TestResults/**/*.xml"

      - name: Build
        run: dotnet build /p:Version=${{ steps.changelog.outputs.version }} --no-restore --no-incremental
  
      - name: Test
        run: dotnet test --logger "trx;logfilename=testResults.trx" --collect:"XPlat Code Coverage;Format=opencover" --results-directory "TestResults" --no-build

      - name: Publish Sonar Scanner Results
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        run: |
          ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
  
      # - name: SonarQube Quality Gate check
      #   id: sonarqube-quality-gate-check
      #   uses: sonarsource/sonarqube-quality-gate-action@master
      #   # Force to fail step after specific time.
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      #   with:
      #     scanMetadataReportFile: .sonarqube/out/.sonar/report-task.txt

      # - name: "Example show SonarQube Quality Gate Status value"
      #   run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"

      # - name: SonarQube Pull Request Comment
      #   if: always()
      #   uses: campos-pay/sonarqube-pr-comment@main
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
      #   with:
      #     sonar_token: ${{ secrets.SONAR_TOKEN }}
      #     sonar_host_url: ${{ secrets.SONAR_HOST_URL }}
      #     sonar_projectkey: ${{ env.PROJECT_KEY }}
      #     github-token: ${{ secrets.GITHUB_TOKEN }}